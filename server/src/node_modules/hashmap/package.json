{
  "name": "hashmap",
  "author": {
    "name": "Ariel Flesler",
    "email": "aflesler@gmail.com"
  },
  "version": "0.9.3",
  "description": "HashMap for Node",
  "keywords": [
    "hashmap",
    "map",
    "object",
    "array",
    "associative"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/flesler/hashmap"
  },
  "main": "./hashmap.js",
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "readme": "# HashMap Class for JavaScript\r\n\r\n## Description\r\n\r\nThis project provides a `HashMap` class that works both on __NodeJS__ and the __browser__.\r\nHashMap instances __store key/value pairs__ allowing __keys of any type__.\r\n\r\nUnlike regular objects, __keys won't not be stringified__. For example numbers and strings won't be mixed, you can pass `Date`'s, `RegExp`'s, DOM Elements, anything! (even `null` and `undefined`)\r\n\r\n## Examples\r\n\r\nAssume this for all examples below\r\n\r\n\tvar map = new HashMap();\r\n\r\nIf you're using this within Node, you first need to import the class\r\n\r\n\tvar HashMap = require('hashmap').HashMap;\r\n \r\n### Basic use case\r\n\r\n\tmap.set(\"some_key\", \"some value\");\r\n\tmap.get(\"some_key\"); // --> \"some value\"\r\n \r\n### No stringification\r\n\r\n\tmap.set(\"1\", \"string one\");\r\n\tmap.set(1, \"number one\");\r\n\tmap.get(\"1\"); // --> \"string one\"\r\n\r\nA regular `Object` used as a map would yield `\"number one\"`\r\n\r\n###  Objects as keys\r\n\r\n\tvar key = {};\r\n\tvar key2 = {};\r\n\tmap.set(key, 123);\r\n\tmap.set(key2, 321);\r\n\tmap.get(key); // --> 123\r\n\r\nA regular `Object` used as a map would yield `321`\r\n\r\n###  Iterating\r\n\r\n    map.set(1, \"test 1\");\r\n    map.set(2, \"test 2\");\r\n    map.set(3, \"test 3\");\r\n    \r\n    map.forEach(function(value, key) {\r\n        console.log(key + \" : \" + value);\r\n    });\r\n\r\n[Check the tests](https://github.com/flesler/hashmap/blob/master/test/all.js) for some more real code.\r\n\r\n## TODO's\r\n\r\nThis project is in early development, so any feedback/changes are specially appreciated.\r\n\r\n* (?) Allow extending the hashing function in a AOP way or by passing a service\r\n* Fix: The hashmap will expose an enumerable expando when `Object.defineProperty` doesn't exist maybe use a different hashing approach for this case like `Array.indexOf`\r\n* Use a real test framework\r\n* Make tests work on the browser\r\n* Document the public API of HashMap's\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 Ariel Flesler &lt;aflesler@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/flesler/hashmap/issues"
  },
  "_id": "hashmap@0.9.3",
  "_from": "hashmap@"
}
